function PM_setcontrasts(subpar)
% parSetContrasts(subpar)
% Sets contrasts.
% 
% subpar refers to either the subject number (in string notation) or
% the par struct generated by par = par_params(subject)
% 
% made from av_setContrasts  1/28/08 jbh
% modified to subpar format, etc, 7/24/08 jbh



origdir = pwd;


% ---load par params if need be---
if isstruct(subpar) % if it is par_params struct
    par = subpar;
else % assume subject string
    par = par_params(subpar);
end

STAT = par.constat;

cd(par.analysisdir);
fprintf('\nLoading SPM...');
load SPM
fprintf('Done');

Xsize = size(SPM.xX.xKXs.X,2);

padCon = @padConWithZeros;

regNames = SPM.xX.name;

% T-contrasts
%---------------------------------------------------------------------------



% so you want to make a contrast...
% instead of manually typing out the contrast matrix, I'll create them
% based on contrast names.  Anything 'fancier' than simple contrasts (e.g.
% parametric contrasts) will be specified after this section.  This will
% also produce the inverse contrasts of anything specified.  Note that for
% balancing ease of interpretation with shorthand, all conditions must
% contain only one initial cap [A-Z]
% current conditions:


idx.face = ~cellfun('isempty', strfind(regNames,'face'));
idx.house = ~cellfun('isempty', strfind(regNames,'house'));

idx.bf1 = ~cellfun('isempty', strfind(regNames,'bf(1)'));
idx.high = ~cellfun('isempty', strfind(regNames,'high'));
idx.low = ~cellfun('isempty', strfind(regNames,'low'));

idx.inc = ~cellfun('isempty', strfind(regNames,'inc'));
idx.cor = ~cellfun('isempty', strfind(regNames,'cor'));

idx.conf1 = ~cellfun('isempty', strfind(regNames,'conf1'));
idx.conf2 = ~cellfun('isempty', strfind(regNames,'conf2'));
idx.conf3 = ~cellfun('isempty', strfind(regNames,'conf3'));
idx.conf4 = ~cellfun('isempty', strfind(regNames,'conf4'));

idx.acc =  ~cellfun('isempty', strfind(regNames,'acc'));
idx.class = ~cellfun('isempty', strfind(regNames,'class'));
idx.conf =  ~cellfun('isempty', strfind(regNames,'Conf'));
idx.rt = ~cellfun('isempty', strfind(regNames,'RT'));

idx.ev = ~cellfun('isempty', strfind(regNames,'Ev'));

idx.left = ~cellfun('isempty', strfind(regNames,'Left'));
idx.right = ~cellfun('isempty', strfind(regNames,'Right'));

if strcmp(par.thisAnalysis, 'AnalysisRetByRREv')
    con.faceCorEv = idx.ev .* idx.face .* idx.cor;
    con.houseCorEv = idx.ev .* idx.house .* idx.cor;
    con.evCor = idx.ev .* idx.cor;
    con.faceCorEvVsHouseCorEv = idx.ev .* (idx.face - idx.house) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'AnalysisRetByRREv_signedByHand')
    con.leftCorEv = idx.ev .* idx.left .* idx.cor;
    con.rightCorEv = idx.ev .* idx.right .* idx.cor;
    con.evCor = idx.ev .* idx.cor;
    con.rightCorEvVsLeftCorEv = idx.ev .* (idx.left - idx.right) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'analysisRetByConf')
%     con.faceCorConf = idx.conf .* idx.face .* idx.cor;
%     con.houseCorConf = idx.conf .* idx.house .* idx.cor;
%     con.CorConf = idx.conf .* idx.cor;
%     con.faceCorConfVsHouseCorConf = idx.conf .* (idx.face - idx.house) .* idx.cor;
%     con.faceAllConf = idx.conf .* idx.face;
%     con.houseAllConf = idx.conf .* idx.house;
%     con.allConf = idx.conf;
%     con.faceAllConfVsHouseAllConf = idx.conf .* (idx.face - idx.house);
    con.faceIncConf = idx.conf .* idx.face .* idx.inc;
    con.houseIncConf = idx.conf .* idx.house .* idx.inc;
    con.IncConf = idx.conf .* idx.inc;
    con.faceIncConfVsHouseCorConf = idx.conf .* (idx.face - idx.house) .* idx.inc;
elseif strcmp(par.thisAnalysis, 'analysisRetByConf_signedByHand')
    con.rightCor = ~idx.conf .* idx.right .* idx.cor;
    con.leftCor = ~idx.conf .* idx.left .* idx.cor;
    con.leftVsRightCor = ~idx.conf .* (idx.left - idx.right) .* idx.cor;
    con.leftCorConf = idx.conf .* idx.left .* idx.cor;
    con.rightCorConf = idx.conf .* idx.right .* idx.cor;
    con.CorConf = idx.conf .* idx.cor;
    con.rightCorConfVsLeftCorConf = idx.conf .* (idx.left - idx.right) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'analysisRetByRT')
%     con.faceCorRT = idx.rt .* idx.face .* idx.cor;
%     con.houseCorRT = idx.rt .* idx.house .* idx.cor;
%     con.CorRT = idx.rt .* idx.cor;
%     con.faceCorRTVsHouseCorRT = idx.rt .* (idx.face - idx.house) .* idx.cor;
%     con.faceAllRT = idx.rt .* idx.face;
%     con.houseAllRT = idx.rt .* idx.house;
%     con.allRT = idx.rt;
%     con.faceAllRTVsHouseAllRT = idx.rt .* (idx.face - 2*idx.house) ;
    con.faceIncRT = idx.rt .* idx.face .* idx.inc;
    con.houseIncRT = idx.rt .* idx.house .* idx.inc;
    con.IncRT = idx.rt .* idx.inc;
    con.faceIncRTVsHouseIncRT = idx.rt .* (idx.face - idx.house) .* idx.inc;
elseif strcmp(par.thisAnalysis, 'analysisRetByRT_signedByHand')
    con.rightCorRT = idx.rt .* idx.right .* idx.cor;
    con.leftCorRT = idx.rt .* idx.left .* idx.cor;
    con.CorRT = idx.rt .* idx.cor;
    con.rightCorRTVsLeftCorRT = idx.rt .* (idx.right - idx.left) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'analysisPercByConf')
    con.faceCorConf = idx.conf .* idx.face .* idx.cor; n.faceCorConf = 1;
    con.houseCorConf = idx.conf .* idx.house .* idx.cor; n.houseCorConf = 1;
    con.CorConf = idx.conf .* idx.cor; n.CorConf = 2; 
    con.faceCorConfVsHouseCorConf = idx.conf .* (idx.face - idx.house) .* idx.cor; n.faceCorConfVsHouseCorConf = 2;
    con.faceAllConf = idx.conf .* idx.face; n.faceAllConf = 2;
    con.houseAllConf = idx.conf .* idx.house; n.houseAllConf = 1;
    con.allConf = idx.conf; n.allConf = 4;
    con.faceAllConfVsHouseAllConf = idx.conf .* (idx.face - idx.house); n.faceAllConfVsHouseAllConf = 4;
    con.faceAllConf = idx.conf .* idx.face; n.faceAllConf = 2;
    con.houseAllConf = idx.conf .* idx.house; n.houseAllConf = 2;
    con.faceIncConf = idx.conf .* idx.face .* idx.inc; n.faceIncConf = 1;
    con.houseIncConf = idx.conf .* idx.house .* idx.inc; n.houseIncConf = 1;
    con.IncConf = idx.conf .* idx.inc; n.IncConf = 2;
    con.faceIncConfVsHouseIncConf = idx.conf .* (idx.face - idx.house) .* idx.inc; n.faceIncConfVsHouseIncConf = 2; 
elseif strcmp(par.thisAnalysis, 'analysisPercByConf_signedByHand')
    con.rightCor = ~idx.conf .* idx.right .* idx.cor;
    con.leftCor = ~idx.conf .* idx.left .* idx.cor;
    con.leftVsRightCor = ~idx.conf .* (idx.left - idx.right) .* idx.cor;
    con.leftCorConf = idx.conf .* idx.left .* idx.cor;
    con.rightCorConf = idx.conf .* idx.right .* idx.cor;
    con.corConf = idx.conf .* idx.cor;
    con.rightCorConfVsLeftCorConf = idx.conf .* (idx.left - idx.right) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'analysisPercByRT')
%     con.faceCorRT = idx.rt .* idx.face .* idx.cor;
%     con.houseCorRT = idx.rt .* idx.house .* idx.cor;
%     con.CorRT = idx.rt .* idx.cor;
%     con.faceCorRTVsHouseCorRT = idx.rt .* (idx.face - idx.house) .* idx.cor;
%     con.faceAllRT = idx.rt .* idx.face;
%     con.houseAllRT = idx.rt .* idx.house;
%     con.allRT = idx.rt;
%     con.faceAllRTVsHouseAllRT = idx.rt .* (idx.face - idx.house);
    con.faceIncRT = idx.rt .* idx.face .* idx.inc;
    con.houseIncRT = idx.rt .* idx.house .* idx.inc;
    con.IncRT = idx.rt .* idx.inc;
    con.faceIncRTVsHouseIncRT = idx.rt .* (idx.face - idx.house) .* idx.inc;
elseif strcmp(par.thisAnalysis, 'analysisPercByRT_signedByHand')
    con.leftCorRT = idx.rt .* idx.left .* idx.cor;
    con.rightCorRT = idx.rt .* idx.right .* idx.cor;
    con.corRT = idx.rt .* idx.cor;
    con.rightCorRTVsLeftCorRT = idx.rt .* (idx.left - idx.right) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'AnalysisPercByPercEv')
    con.faceCorEv = idx.ev .* idx.face .* idx.cor;
    con.houseCorEv = idx.ev .* idx.house .* idx.cor;
    con.evCor = idx.ev .* idx.cor;
    con.faceCorEvVsHouseCorEv = idx.ev .* (idx.face - idx.house) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'AnalysisPercByPercEv_signedByHand')
    con.leftCorEv = idx.ev .* idx.left .* idx.cor;
    con.rightCorEv = idx.ev .* idx.right .* idx.cor;
    con.evCor = idx.ev .* idx.cor;
    con.rightCorEvVsLeftCorEv = idx.ev .* (idx.left - idx.right) .* idx.cor;
elseif strcmp(par.thisAnalysis, 'analysisPercByAllConf')
    con.faceAllConf = idx.conf .* idx.face;
    con.houseAllConf = idx.conf .* idx.house;
    con.AllConf = idx.conf;
    con.faceAllConfVsHouseAllConf = idx.conf .* (idx.face - idx.house);
elseif strcmp(par.thisAnalysis, 'analysisPercByAllRT')
    con.faceAllRT = idx.rt .* idx.face;
    con.houseAllRT = idx.rt .* idx.house;
    con.AllRT = idx.rt;
    con.faceAllRTVsHouseAllRT = idx.rt .* (idx.face - idx.house);
elseif strcmp(par.thisAnalysis, 'analysisRetByAllConf')
    con.faceAllConf = idx.conf .* idx.face;
    con.houseAllConf = idx.conf .* idx.house;
    con.AllConf = idx.conf;
    con.faceAllConfVsHouseAllConf = idx.conf .* (idx.face - idx.house);
elseif strcmp(par.thisAnalysis, 'analysisRetByAllRT')
    con.faceAllRT = idx.rt .* idx.face;
    con.houseAllRT = idx.rt .* idx.house;
    con.AllRT = idx.rt;
    con.faceAllRTVsHouseAllConf = idx.rt .* (idx.face - idx.house);
else
    error ('unrecognized analysis type')
end

fn = fieldnames(idx);


fn_con = fieldnames(con);

fx = 0;
for f = 1:length(fn_con)
    missingTerm = length(find(con.(fn_con{f}))) ~= n.(fn_con{f});
    
    if ~missingTerm 
        fx = fx+1;
        cnames{fx} = fn_con{f};
        cvals{fx} = con.(fn_con{f});
    end
end


% preallocate
con_name(1:length(cnames)) = {''};
con_vals = cell(1, length(cnames));

%con_vals(1:length(cnames)) = {zeros(1,length(cnames))};

for Tt = 1:length(cnames)

    % make names
    con_name{Tt} = cnames{Tt};

    con_vals{Tt} = double(cvals{Tt});

    con_fileName{Tt} = ['con_' prepend(Tt, 4) '.img']; 
end

conStruct.con_name = con_name;
conStruct.con_vals = con_vals;
conStruct.con_fileName = con_fileName;

save conStruct conStruct;

% put contrasts into SPM/write to file

fprintf('\nBeginning contrasts on subject %s\n', par.substr);

cfid = fopen('conlist','wt');
fprintf(cfid, 'Contrasts for Sub %s\nLast run on %s\n', par.substr, date);

% Loop over created contrasts
%-------------------------------------------------------------------
for k=1:length(con_vals)

    % Basic checking of contrast
    %-------------------------------------------------------------------
    [c,I,emsg,imsg] = spm_conman('ParseCon',con_vals{k},SPM.xX.xKXs,STAT);
    if ~isempty(emsg)
        disp(emsg);
        error('Error in contrast specification');
    else
        disp(imsg);
    end;

    % Fill-in the contrast structure
    %-------------------------------------------------------------------
    if all(I)
        DxCon = spm_FcUtil('Set',con_name{k},STAT,'c',c,SPM.xX.xKXs);
    else
        DxCon = [];
    end

    % Append to SPM.xCon. SPM will automatically save any contrasts that
    % evaluate successfully.
    %-------------------------------------------------------------------
    if isempty(SPM.xCon)
        SPM.xCon = DxCon;
    elseif ~isempty(DxCon)
        SPM.xCon(end+1) = DxCon;
    end
    SPM = spm_contrasts(SPM,length(SPM.xCon));
        
    fprintf(fopen('conlist','at'),'%d: %s\n%s\n\n',k, con_name{k},num2str(con_vals{k}));
end

fclose(cfid);
%copyfile('conlist',[par.logdir filesep 'conlist-' date]);
fclose('all');
% Change back directory
cd(origdir);
return;

% put in here, so I don't have to add it to path or go back to scripts dir
% to execute...
function con = padConWithZeros( cIn, Xsize )

conLength = length(cIn);
nZeros = Xsize - conLength;
con = [cIn zeros(1,nZeros)];

