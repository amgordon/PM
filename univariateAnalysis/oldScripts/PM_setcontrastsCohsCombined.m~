function DK_setcontrasts(subpar)
% parSetContrasts(subpar)
% Sets contrasts.
% 
% subpar refers to either the subject number (in string notation) or
% the par struct generated by par = par_params(subject)
% 
% made from av_setContrasts  1/28/08 jbh
% modified to subpar format, etc, 7/24/08 jbh



origdir = pwd;


% ---load par params if need be---
if isstruct(subpar) % if it is par_params struct
    par = subpar;
else % assume subject string
    par = par_params(subpar);
end

STAT = par.constat;

cd(par.analysisdir);
fprintf('\nLoading SPM...');
load SPM
fprintf('Done');

Xsize = size(SPM.xX.xKXs.X,2);

padCon = @padConWithZeros;

regNames = SPM.xX.name;

% T-contrasts
%---------------------------------------------------------------------------



% so you want to make a contrast...
% instead of manually typing out the contrast matrix, I'll create them
% based on contrast names.  Anything 'fancier' than simple contrasts (e.g.
% parametric contrasts) will be specified after this section.  This will
% also produce the inverse contrasts of anything specified.  Note that for
% balancing ease of interpretation with shorthand, all conditions must
% contain only one initial cap [A-Z]
% current conditions:

idx.face = ~cellfun('isempty', strfind(regNames,'face'));
idx.house = ~cellfun('isempty', strfind(regNames,'house'));

idx.bf1 = ~cellfun('isempty', strfind(regNames,'bf(1)'));

% idx.coh0 = ~cellfun('isempty', strfind(regNames,'coh0'));
% idx.coh15 = ~cellfun('isempty', strfind(regNames,'coh15'));
% idx.coh20 = ~cellfun('isempty', strfind(regNames,'coh20'));
% idx.coh25 = ~cellfun('isempty', strfind(regNames,'coh25'));
% idx.coh35 = ~cellfun('isempty', strfind(regNames,'coh35'));
% idx.coh45 = ~cellfun('isempty', strfind(regNames,'coh45'));
% idx.coh60 = ~cellfun('isempty', strfind(regNames,'coh60'));
% idx.coh100 = ~cellfun('isempty', strfind(regNames,'coh100'));

idx.coh0Face = ~cellfun('isempty', strfind(regNames,'Face'));
idx.coh0House = ~cellfun('isempty', strfind(regNames,'House'));

% idx.CohQ1 = idx.coh15 + idx.coh20;
% idx.CohQ2 = idx.coh25 + idx.coh35;
% idx.CohQ3 = idx.coh45 + idx.coh60;
% idx.CohQ4 = idx.coh100;

idx.inc = ~cellfun('isempty', strfind(regNames,'inc'));
idx.cor = ~cellfun('isempty', strfind(regNames,'cor'));

% NVec = cellfun('length',{SPM.Sess.U.ons});
% NVec_zeros = [NVec; zeros(size(NVec));zeros(size(NVec))];  
% NVec_zeros_reshaped = reshape(NVec_zeros, 28*3, 1);
% 
% NCoeff = zeros(size(idx.bf1));
% NCoeff(1:length(NVec_zeros_reshaped)) = NVec_zeros_reshaped;


con.faceVsHouse_corOnly = (idx.face - idx.house) .* idx.cor .* idx.bf1 ;
con.houseVsFace_corOnly = (idx.house - idx.face) .* idx.cor .* idx.bf1 ;

%con.faceVsHouse_corOnly_weightedByN = 
%con.houseVsFace_corOnly_weightedByN = 

con.faceVsHouse_Q1_corOnly = (idx.face - idx.house) .* idx.CohQ1 .* idx.cor .* idx.bf1 ;
con.faceVsHouse_Q2_corOnly = (idx.face - idx.house) .* idx.CohQ2 .* idx.cor .* idx.bf1 ;
con.faceVsHouse_Q3_corOnly = (idx.face - idx.house) .* idx.CohQ3 .* idx.cor .* idx.bf1 ;
con.faceVsHouse_Q4_corOnly = (idx.face - idx.house) .* idx.CohQ4 .* idx.cor .* idx.bf1 ;
con.faceVsHouse_coh0_corOnly = (idx.coh0Face - idx.coh0House) .* idx.bf1 ;

con.faceVsHouse_corOnly_with0coh = con.faceVsHouse_corOnly + con.faceVsHouse_coh0_corOnly;
con.houseVsFace_corOnly_with0coh = con.houseVsFace_corOnly - con.faceVsHouse_coh0_corOnly;

con.cohLinear = (-3.5*idx.coh0 +  -2.5*idx.coh15 + -1.5*idx.coh20+ -.5*idx.coh25 + .5* idx.coh35 +  1.5*idx.coh45+ 2.5*idx.coh60+ 3.5*idx.coh100) .* idx.cor .*idx.bf1;
con.cohLinearFace = con.cohLinear .* idx.face;
con.cohLinearHouse = con.cohLinear .* idx.house;

con.binnedHalvesCoh = ((idx.CohQ3 + idx.CohQ4) - (idx.CohQ1 + idx.CohQ2) ).* idx.bf1 ;
con.binnedQuartersCoh = (1.5*idx.CohQ4 + .5*idx.CohQ3 + -.5*idx.CohQ2 + -1.5*idx.CohQ1) .* idx.bf1 ;
con.binnedQuartersCoh_HighVsLow = (idx.CohQ4 - idx.CohQ1) .* idx.bf1 ;

con.corVsInc = (idx.cor - idx.inc) .* idx.bf1 ;
con.faceCorVsFaceInc = con.corVsInc .* idx.face;
con.houseCorVsHouseInc = con.corVsInc .* idx.house;


    
fn = fieldnames(idx);
for f = 1:length(fn)
    thisConName = [ fn{f} '_vs_fix'];
    con.(thisConName) = idx.(fn{f});
end



con.all_vs_fix = double(idx.bf1);

 fn_con = fieldnames(con);


 for f = 1:length(fn_con)
     cnames{f} = fn_con{f};
     cvals{f} = con.(fn_con{f});
 end


    




% preallocate
con_name(1:length(cnames)) = {''};
con_vals = cell(1, length(cnames));

%con_vals(1:length(cnames)) = {zeros(1,length(cnames))};

for Tt = 1:length(cnames)

    % make names
    con_name{Tt} = cnames{Tt};

    con_vals{Tt} = double(cvals{Tt});
    
%     %puts two zeros between each element of cvals (to account for
%     %inclusion of time and dispersion derivatives).
%     val_processor_h = vertcat(cvals{Tt}, zeros(2, length(cvals{Tt})));
%     val_processor = horzcat(val_processor_h(:))';
% 
%     
%     con_vals{Tt} = val_processor;

    %     some peace of mind (math check)
%    if sum(con_vals{Tt}) ~= 0;
%        error('lopsided contrast!!!');
%    end

end

% any other fancy contrasts?
% 
% fnc = length(con_name);
% nCnds = length(SPM.Sess.U);
% 
% con_vals{fnc+1}         = repmat([1 0 0], 1, nCnds);
% con_name{fnc+1}         = 'allVsFix';
% con_vals{fnc+2}          = repmat([-1 0 0], 1, nCnds);
% con_name{fnc+2}         = 'fixVsAll';

% put contrasts into SPM/write to file

fprintf('\nBeginning contrasts on subject %s\n', par.substr);


cfid = fopen('conlist','wt');
fprintf(cfid, 'Contrasts for Sub %s\nLast run on %s\n', par.substr, date);

% Loop over created contrasts
%-------------------------------------------------------------------
for k=1:length(con_vals)

    % Basic checking of contrast
    %-------------------------------------------------------------------
    [c,I,emsg,imsg] = spm_conman('ParseCon',con_vals{k},SPM.xX.xKXs,STAT);
    if ~isempty(emsg)
        disp(emsg);
        error('Error in contrast specification');
    else
        disp(imsg);
    end;

    % Fill-in the contrast structure
    %-------------------------------------------------------------------
    if all(I)
        DxCon = spm_FcUtil('Set',con_name{k},STAT,'c',c,SPM.xX.xKXs);
    else
        DxCon = [];
    end

    % Append to SPM.xCon. SPM will automatically save any contrasts that
    % evaluate successfully.
    %-------------------------------------------------------------------
    if isempty(SPM.xCon)
        SPM.xCon = DxCon;
    elseif ~isempty(DxCon)
        SPM.xCon(end+1) = DxCon;
    end
    SPM = spm_contrasts(SPM,length(SPM.xCon));
        
    fprintf(fopen('conlist','at'),'%d: %s\n%s\n\n',k, con_name{k},num2str(con_vals{k}));
end

fclose(cfid);
copyfile('conlist',[par.logdir filesep 'conlist-' date]);

% Change back directory
cd(origdir);
return;

% put in here, so I don't have to add it to path or go back to scripts dir
% to execute...
function con = padConWithZeros( cIn, Xsize )

conLength = length(cIn);
nZeros = Xsize - conLength;
con = [cIn zeros(1,nZeros)];

